/*******************************************************************************
* Everything Controller - Codigo Base para o Controle (v1.0)
* 
* Codigo base do controle "Everything Controller" para envio de dados para um 
* receptor. Comunicacao baseada em RF24 atraves do modulo NRF24L01+.
* O controle envia dados de 6 botoes digitais, 2 joysticks (2 eixos X e 2 eixos Y),
* assim como a leitura analogica de dois sliders.
* Com esses dados e possivel o controle de diversos robos.
* 
* Escrito por Giovanni de Castro (07/01/2023).
* 
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version (<https://www.gnu.org/licenses/>).
*******************************************************************************/

// Bibliotecas
#include <SPI.h>
#include <RF24.h>
#include <Wire.h>
#include <Arduino.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// ------------------------------------------------------------------------------
// Pinos de controle do modulo de radio
const uint8_t PINO_CE = 9;
const uint8_t PINO_CSN = 10;

// Variaveis de controle do display OLED
#define ENDERECO_I2C 0x3C
#define LARGURA_DISPLAY 128
#define ALTURA_DISPLAY 64
#define RESET_DISPLAY -1

// Pinos de controle dos LEDs
const uint8_t LED_STATUS = 8;
const uint8_t LED_L = 13;

// Pinos de entradas analogicas e digitais

// Endereco do controle
const uint8_t ENDERECO_RADIO[][6] = {"Ctrlr", "Robot"};

// Numero do radio
const uint8_t NUMERO_RADIO = 0;

// Criacao do objeto de controle do modulo
RF24 radio(PINO_CE, PINO_CSN);

// Objeto de controle do display
Adafruit_SSD1306 display(LARGURA_DISPLAY, ALTURA_DISPLAY, &Wire, RESET_DISPLAY);

// Pinos de entradas analogicas e digitais
const uint8_t PINOS_DIGITAIS[6] = {2, 3, 4, 5, 6, 7};
bool leituras_digitais[6] = {0, 0, 0, 0, 0, 0};
const uint8_t PINOS_ANALOGICOS[6] = {A0, A1, A2, A3, A6, A7};
uint16_t leituras_analogicas[6] = {0, 0, 0, 0, 0, 0};
uint16_t mapeamento_joysticks[4] = {0, 0, 0, 0};
uint16_t progresso_sliders[2] = {0, 0};

/**********************
 * Copiar estrutura no
 * codigo do robo
 **********************/
// Estrutura que armazena as variaveis que serao enviadas para o robo
typedef struct
{
  uint8_t leitura_botao1;
  uint8_t leitura_botao2;
  uint8_t leitura_botao3;
  uint8_t leitura_botao4;
  uint8_t leitura_botao5;
  uint8_t leitura_botao6;
  uint16_t leitura_eixoX1;
  uint16_t leitura_eixoY1;
  uint16_t leitura_eixoX2;
  uint16_t leitura_eixoY2;
  uint16_t leitura_Slide1;
  uint16_t leitura_Slide2;
} valores_controle;
valores_controle controle;

// Imagem de sinal perdido com o robo
const unsigned char lost_signal [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x1f, 0xfe, 0x0f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x0f, 0xfe, 0x0f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x0f, 0xfe, 0x0f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x0f, 0xfe, 0x0f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x0f, 0xfe, 0x0f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x0f, 0xfe, 0x0f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x0f, 0xfe, 0x0f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x0f, 0xfe, 0x0f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x0f, 0xfe, 0x0f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xfc, 0x0f, 0xfe, 0x0f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xfc, 0x0f, 0xfe, 0x0f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xfc, 0x0f, 0xfe, 0x0f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xfc, 0x0f, 0xfe, 0x0f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xfc, 0x0f, 0xfe, 0x0f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xfc, 0x0f, 0xfe, 0x0f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xfc, 0x0f, 0xfe, 0x0f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xfc, 0x0f, 0xfe, 0x0f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xf8, 0x1f, 0xfc, 0x0f, 0xfe, 0x0f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xf8, 0x1f, 0xfc, 0x0f, 0xfe, 0x0f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xf8, 0x1f, 0xfc, 0x0f, 0xfe, 0x0f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xf8, 0x1f, 0xff, 0x8f, 0xfc, 0x7f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xf8, 0x1f, 0xff, 0x03, 0xf0, 0x1f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xf8, 0x1f, 0xff, 0x00, 0xc0, 0x3f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf2, 0x7f, 0xf0, 0x3f, 0xf8, 0x1f, 0xff, 0xc0, 0x00, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf0, 0x7f, 0xf0, 0x3f, 0xf8, 0x1f, 0xff, 0xf0, 0x03, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf0, 0x7f, 0xf0, 0x3f, 0xf8, 0x1f, 0xff, 0xf0, 0x03, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf0, 0x7f, 0xf0, 0x3f, 0xf8, 0x1f, 0xff, 0xc0, 0x00, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf0, 0x7f, 0xf0, 0x3f, 0xf8, 0x1f, 0xff, 0x00, 0xc0, 0x3f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf0, 0x7f, 0xf0, 0x3f, 0xf8, 0x1f, 0xff, 0x03, 0xf0, 0x1f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xfc, 0x7f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

// ------------------------------------------------------------------------------
// Funcao para exibir barra de progresso para os sliders
void drawProgressbar(int x, int y, int width, int height, int progress)
{
  float bar = ((float)(height - 4) / 100) * progress;
  display.drawRect(x, y, width, height, WHITE);
  display.fillRect(x + 2, y + 2, width - 4, bar, WHITE);
}

// ------------------------------------------------------------------------------
// Funcao para exibir o estado dos botoes
void drawButtonState(int x, int y, int width, int height, bool state)
{
  display.drawRect(x, y, width, height, WHITE);
  if (state)
  {
    display.fillRect(x + 2, y + 2, width - 4, height - 4, WHITE);
  }
}

// ------------------------------------------------------------------------------
// Funcao para exibir as posicoes dos joysticks
void drawJoyPosition(int x, int y, int radius, int px, int py)
{
  display.drawCircle(x, y, radius, WHITE);
  display.fillCircle(px, py, radius / 10, WHITE);
}

// ------------------------------------------------------------------------------
// Configuracoes de codigo
void setup()
{

  // Inicia comunicacao serial, se o debug estiver declarado
  Serial.begin(9600);

  // Configuracao dos LEDs
  pinMode(LED_L, OUTPUT);
  digitalWrite(LED_L, LOW);
  pinMode(LED_STATUS, OUTPUT);
  digitalWrite(LED_STATUS, HIGH);

  // Inicializacao do display OLED
  if (!display.begin(SSD1306_SWITCHCAPVCC, ENDERECO_I2C))
  { // Se a inicializacao nao for bem sucedida
    // Exibe mensagem de erro no monitor serial, se opcao estiver definida
    Serial.println(F("FALHA INICIALIZACAO DO DISPLAY!!!"));
    while (!display.begin(SSD1306_SWITCHCAPVCC, ENDERECO_I2C))
    { // Enquanto a inicializacao nao for bem sucedida
      // Exibe mensagem de erro no monitor serial, se opcao estiver definida
      Serial.println(F("."));
      // Pisca LED de alerta
      digitalWrite(LED_L, !digitalRead(LED_L));
      delay(100);
    }
  }

  // Limpa o display se ele tiver com imagens do ultimo uso
  display.clearDisplay();
  display.display();

  // Inicializacao do modulo de radio
  if (!radio.begin())
  { // Se a inicializacao nao for bem sucedida
    // Exibe mensagem de erro no monitor serial, se opcao estiver definida
    Serial.println(F("FALHA NA INICIALIZACAO DO RADIO!!!"));
    while (!radio.begin())
    { // Enquanto a inicializacao nao for bem sucedida
      // Exibe mensagem de erro no monitor serial, se opcao estiver definida
      Serial.println(F("."));
      // Pisca LED de alerta
      digitalWrite(LED_L, !digitalRead(LED_L));
      delay(250);
    }
  }

  // Comanda o radio para operar em baixo consumo de energia
  radio.setPALevel(RF24_PA_MAX);

  // Configura tempo maximo de espera para transmissao de dados sendo igual ao tamanho maximo da mensagem que sera enviada
  radio.setPayloadSize(sizeof(controle));

  // Configura os canais de comunicacao
  radio.openWritingPipe(ENDERECO_RADIO[NUMERO_RADIO]);
  radio.openReadingPipe(1, ENDERECO_RADIO[!NUMERO_RADIO]);

  // Inicializa o radio como transmissor
  radio.stopListening();

  // Inicializacao dos pinos digitais de entrada
  for (uint8_t i = 0; i < 6; i++)
  {
    pinMode(PINOS_DIGITAIS[i], INPUT_PULLUP);
    delay(5);
  }
  // Inicializacao dos pinos analogicos de entrada
  for (uint8_t i = 0; i < 6; i++)
  {
    pinMode(PINOS_ANALOGICOS[i], INPUT);
    delay(5);
  }

  // Atualiza o LED para indicar que o setup esta compelto
  delay(1000);
  digitalWrite(LED_STATUS, LOW);
}

// ------------------------------------------------------------------------------
// Repeticao de codigo
void loop()
{

  // Limpa o display a cada repeticao
  display.clearDisplay();

  // Realiza as leituras analogicas
  for (uint8_t i = 0; i < 6; i++)
  {
    leituras_analogicas[i] = analogRead(PINOS_ANALOGICOS[i]);
    delay(5);
  }

  // Mapeia as barras de progresso com as leituras dos sliders
  progresso_sliders[0] = map(leituras_analogicas[4], 0, 1015, 100, 0);
  progresso_sliders[1] = map(leituras_analogicas[5], 0, 1015, 100, 0);

  // Mapeia a leitura dos joysticks para posicoes validas dentro dos circulos de exibicao
  mapeamento_joysticks[0] = map(leituras_analogicas[3], 0, 1023, 45, 9);   // X1
  mapeamento_joysticks[1] = map(leituras_analogicas[2], 0, 1023, 49, 13);  // Y1
  mapeamento_joysticks[2] = map(leituras_analogicas[1], 0, 1023, 119, 83); // X2
  mapeamento_joysticks[3] = map(leituras_analogicas[0], 0, 1023, 49, 13);  // Y2

  // Realiza as leituras digitais
  for (uint8_t i = 0; i < 6; i++)
  {
    if (i > 1)
    {
      leituras_digitais[i] = !digitalRead(PINOS_DIGITAIS[i]);
      delay(5);
    }
    else
    {
      if (digitalRead(PINOS_DIGITAIS[i]) == LOW)
      {
        delay(10);
        if (digitalRead(PINOS_DIGITAIS[i]) == LOW)
        {
          leituras_digitais[i] = !leituras_digitais[i];
          while (digitalRead(PINOS_DIGITAIS[i]) == LOW)
          {
          }
        }
      }
    }
  }

  // Atualiza as variaveis para envio
  controle.leitura_botao1 = leituras_digitais[0];
  controle.leitura_botao2 = leituras_digitais[1];
  controle.leitura_botao3 = leituras_digitais[2];
  controle.leitura_botao4 = leituras_digitais[3];
  controle.leitura_botao5 = leituras_digitais[4];
  controle.leitura_botao6 = leituras_digitais[5];
  controle.leitura_eixoX1 = leituras_analogicas[3];
  controle.leitura_eixoY1 = leituras_analogicas[2];
  controle.leitura_eixoX2 = leituras_analogicas[1];
  controle.leitura_eixoY2 = leituras_analogicas[0];
  controle.leitura_Slide1 = leituras_analogicas[4];
  controle.leitura_Slide2 = leituras_analogicas[5];

  // Realiza o envio de dados, e verifica o recebimento
  delay(10);
  bool enviado = radio.write(&controle, sizeof(controle));

  if (enviado)
  {
    // Atualiza as barras de progresso
    display.invertDisplay(false);
    drawProgressbar(52, 10, 10, 44, progresso_sliders[0]);
    drawProgressbar(64, 10, 10, 44, progresso_sliders[1]);

    // Exibe as posicoes dos joysticks
    drawJoyPosition(27, 31, 20, mapeamento_joysticks[0], mapeamento_joysticks[1]);
    drawJoyPosition(101, 31, 20, mapeamento_joysticks[2], mapeamento_joysticks[3]);

    // Exibe no display o estado dos botoes
    drawButtonState(2, 0, 60, 10, leituras_digitais[0]);
    drawButtonState(64, 0, 60, 10, leituras_digitais[1]);
    drawButtonState(2, 54, 29, 10, leituras_digitais[5]);
    drawButtonState(33, 54, 29, 10, leituras_digitais[2]);
    drawButtonState(64, 54, 29, 10, leituras_digitais[3]);
    drawButtonState(95, 54, 29, 10, leituras_digitais[4]);

    // Pisca o LED para indicar envio de mensagem
    digitalWrite(LED_STATUS, !digitalRead(LED_STATUS));
  }
  else
  {
    // Exibe a imagem de sinal perdido
    display.invertDisplay(true);
    display.drawBitmap(0, 0, lost_signal, 128, 64, 1);

    // Mantem o LED aceso para indicar erro
    digitalWrite(LED_STATUS, HIGH);
  }

  // Exibe as atualizacoes do display
  display.display();
}
// ------------------------------------------------------------------------------